@import "./sliders.css";
@import "./theme.css";
@import "./rotatecube.css";
@import "./fonts.css";

*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    -webkit-font-smoothing: antialiased;
}

header {
    section {
        display: flex;
        gap: 2px;

        label {
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: all 0.2s ease-in-out;

            svg path {
                fill: var(--text-color);
            }

            &:hover,
            &:focus-visible {
                background-color: grey;
            }
        }
    }
}


body {
    height: 100vh;
    font-family: "Doctor Glitch", Helvetica, sans-serif;
    color: var(--text-color);
    position: relative;
    background-color: var(--bg-body);
    overflow: hidden;
}

h1 {
    font-family: "Ailerons", Helvetica, sans-serif;
    font-size: 4rem;
}

header {
    display: flex;
    justify-content: space-between;
    padding: 10px 20px;
    height: 60px;
}

main {
    height: calc(100vh - 60px);
    padding: 0 20px;
    display: flex;
    align-items: center;
    justify-content: center;
}

section section:nth-of-type(2) {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-gap: 20px;
}

article {
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
    border-radius: 20px;
    width: 8rem;
    aspect-ratio: 1;

    &:nth-of-type(1) {
        background-color: #C6E2E9;
    }

    &:nth-of-type(2) {
        background-color: #FFCAAF;
    }

    &:nth-of-type(3) {
        background-color: #DAB894;
    }

    &:nth-of-type(4) {
        background-color: #EDDEA4;
    }

    &:nth-of-type(5) {
        background-color: #A7BED3;
    }

    &:nth-of-type(6) {
        background-color: #84BC9C;
    }

    &:nth-of-type(7) {
        background-color: #D972FF;
    }
}


form {
    display: flex;
    flex-direction: row;
    /*transform: translateX(14rem);*/
    transition: all 0.3s ease-in-out;
    position: absolute;
    right: 0;
}

form > label {
    width: fit-content;
    height: fit-content;
    transform: rotateZ(-90deg);
    user-select: none;
    cursor: pointer;
    border: 1px solid white;
    border-radius: 10px 10px 0 0;
    padding: 10px;
    margin: 40px -20px 0 0;
}

:root:has(input[name="openMenu"]:checked) form {
    transform: translateX(0);
}

form fieldset {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

label:has(input[name="rx"]) {
    position: absolute;
    bottom: 50%;
    left: -5rem;
    transform: translateY(-50%) rotateZ(-90deg);
}

label:has(input[name="ry"]) {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
}

label:has(input[name="rz"]) {
    position: absolute;
    bottom: 50%;
    right: -5rem;
    transform: translateY(-50%) rotateZ(-90deg);
}

main {
    /*SPACE*/

    > div {
        --size-cube: 50px;
        perspective: 600px;
        width: var(--size-cube);
        height: var(--size-cube);
        transform-style: preserve-3d;
        display: grid;
        transform: translateZ(2000px);

        /*CUBE*/
        > div {
            grid-area: 1/1;
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
            transform:
                    rotateX(calc(var(--rx, 0) * 45deg))
                    rotateY(calc(var(--ry, 0) * 45deg))
                    rotateZ(calc(var(--rz, 0) * 45deg))
                    translateX(calc(var(--tx, 0) * var(--size-cube)))
                    translateY(calc(var(--ty, 0) * var(--size-cube)))
                    translateZ(calc(var(--tz, 0) * var(--size-cube)));
            transition: 1s;


            &:nth-of-type(1) {
                --tx: -1;
                --ty: -1;
                --tz: -1;
            }

            &:nth-of-type(2) {
                --tx: -1;
                --ty: -1;
                --tz: 0;
            }

            &:nth-of-type(3) {
                --tx: -1;
                --ty: -1;
                --tz: 1;
            }

            &:nth-of-type(4) {
                --tx: 0;
                --ty: -1;
                --tz: -1;
            }

            &:nth-of-type(5) {
                --tx: 0;
                --ty: -1;
                --tz: 0;
            }

            &:nth-of-type(6) {
                --tx: 0;
                --ty: -1;
                --tz: 1;
            }

            &:nth-of-type(7) {
                --tx: 1;
                --ty: -1;
                --tz: -1;
            }

            &:nth-of-type(8) {
                --tx: 1;
                --ty: -1;
                --tz: 0;
            }

            &:nth-of-type(9) {
                --tx: 1;
                --ty: -1;
                --tz: 1;
            }

            &:nth-of-type(10) {
                --tx: -1;
                --ty: 0;
                --tz: -1;
            }

            &:nth-of-type(11) {
                --tx: -1;
                --ty: 0;
                --tz: 0;
            }

            &:nth-of-type(12) {
                --tx: -1;
                --ty: 0;
                --tz: 1;
            }

            &:nth-of-type(13) {
                --tx: 0;
                --ty: 0;
                --tz: -1;
            }

            &:nth-of-type(14) {
                --tx: 0;
                --ty: 0;
                --tz: 0;
            }

            &:nth-of-type(15) {
                --tx: 0;
                --ty: 0;
                --tz: 1;
            }

            &:nth-of-type(16) {
                --tx: 1;
                --ty: 0;
                --tz: -1;
            }

            &:nth-of-type(17) {
                --tx: 1;
                --ty: 0;
                --tz: 0;
            }

            &:nth-of-type(18) {
                --tx: 1;
                --ty: 0;
                --tz: 1;
            }

            &:nth-of-type(19) {
                --tx: -1;
                --ty: 1;
                --tz: -1;
            }

            &:nth-of-type(20) {
                --tx: -1;
                --ty: 1;
                --tz: 0;
            }

            &:nth-of-type(21) {
                --tx: -1;
                --ty: 1;
                --tz: 1;
            }

            &:nth-of-type(22) {
                --tx: 0;
                --ty: 1;
                --tz: -1;
            }

            &:nth-of-type(23) {
                --tx: 0;
                --ty: 1;
                --tz: 0;
            }

            &:nth-of-type(24) {
                --tx: 0;
                --ty: 1;
                --tz: 1;
            }

            &:nth-of-type(25) {
                --tx: 1;
                --ty: 1;
                --tz: -1;
            }

            &:nth-of-type(26) {
                --tx: 1;
                --ty: 1;
                --tz: 0;
            }

            &:nth-of-type(27) {
                --tx: 1;
                --ty: 1;
                --tz: 1;
            }
        }
    }
}



[data-side="front-side"],
[data-side="back-side"],
[data-side="left-side"],
[data-side="right-side"],
[data-side="top-side"],
[data-side="bottom-side"] {
    width: 100%;
    height: 100%;
    position: absolute;
    border: 1px solid black;
    opacity: 1;
}

[data-side="front-side"] {
    background-color: red;
    transform: rotateY(0deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="back-side"] {
    background-color: orange;
    transform: rotateY(180deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="left-side"] {
    background-color: green;
    transform: rotateY(-90deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="right-side"] {
    background-color: blue;
    transform: rotateY(90deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="top-side"] {
    background-color: white;
    transform: rotateX(90deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="bottom-side"] {
    background-color: yellow;
    transform: rotateX(-90deg) translateZ(calc(var(--size-cube) * .5));
}