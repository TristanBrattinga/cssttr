@import "./sliders.css";
@import "./theme.css";
@import "./rotatecube.css";
@import "./fonts.css";
@import "./intro.css";

*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    -webkit-font-smoothing: antialiased;
    scroll-behavior: smooth;
}

body {
    height: 100vh;
    width: 100vw;
    font-family: "Ailerons", Helvetica, sans-serif;
    color: var(--text-color);
    position: relative;
    background-color: var(--bg-body);
    overflow-x: hidden;
}

header {
    display: flex;
    justify-content: space-between;
    padding: 10px 20px;
    height: 60px;
    position: fixed;
    width: 100%;
    z-index: 10;

    nav {
        display: flex;
        gap: 2px;

        label {
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: all 0.2s ease-in-out;

            svg path {
                fill: var(--text-color);
            }

            &:hover,
            &:focus-visible {
                background-color: grey;
            }
        }
    }
}

h1,
h2,
h3,
h4,
p {
    font-size: 3.25rem;
    text-align: center;
}

/*SPACE*/
main {
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    perspective: 600px;
    transform-style: preserve-3d;

    /*CUBE*/
    > div {
        --size-cube: 50px;
        width: var(--size-cube);
        height: var(--size-cube);
        transform-style: preserve-3d;
        display: grid;
        transform:
            rotateX(calc(var(--rcx, 0) * 90deg))
            rotateY(calc(var(--rcy, 0) * 90deg))
            rotateZ(calc(var(--rcz, 0) * 90deg));
        transition: 1s;

        /*SINGLE CUBIE*/
        > div {
            grid-area: 1/1;
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
            transform:
                    rotateX(calc(var(--rx, 0) * 90deg))
                    rotateY(calc(var(--ry, 0) * 90deg))
                    rotateZ(calc(var(--rz, 0) * 90deg))
                    translateX(calc(var(--tx, 0) * var(--size-cube)))
                    translateY(calc(var(--ty, 0) * var(--size-cube)))
                    translateZ(calc(var(--tz, 0) * var(--size-cube)));
            transition: 1s;

            &:nth-of-type(1) {
                --tx: -1;
                --ty: -1;
                --tz: -1;
            }

            &:nth-of-type(2) {
                --tx: -1;
                --ty: -1;
                --tz: 0;
            }

            &:nth-of-type(3) {
                --tx: -1;
                --ty: -1;
                --tz: 1;
            }

            &:nth-of-type(4) {
                --tx: 0;
                --ty: -1;
                --tz: -1;
            }

            &:nth-of-type(5) {
                --tx: 0;
                --ty: -1;
                --tz: 0;
            }

            &:nth-of-type(6) {
                --tx: 0;
                --ty: -1;
                --tz: 1;
            }

            &:nth-of-type(7) {
                --tx: 1;
                --ty: -1;
                --tz: -1;
            }

            &:nth-of-type(8) {
                --tx: 1;
                --ty: -1;
                --tz: 0;
            }

            &:nth-of-type(9) {
                --tx: 1;
                --ty: -1;
                --tz: 1;
            }

            &:nth-of-type(10) {
                --tx: -1;
                --ty: 0;
                --tz: -1;
            }

            &:nth-of-type(11) {
                --tx: -1;
                --ty: 0;
                --tz: 0;
            }

            &:nth-of-type(12) {
                --tx: -1;
                --ty: 0;
                --tz: 1;
            }

            &:nth-of-type(13) {
                --tx: 0;
                --ty: 0;
                --tz: -1;
            }

            &:nth-of-type(14) {
                --tx: 0;
                --ty: 0;
                --tz: 0;
            }

            &:nth-of-type(15) {
                --tx: 0;
                --ty: 0;
                --tz: 1;
            }

            &:nth-of-type(16) {
                --tx: 1;
                --ty: 0;
                --tz: -1;
            }

            &:nth-of-type(17) {
                --tx: 1;
                --ty: 0;
                --tz: 0;
            }

            &:nth-of-type(18) {
                --tx: 1;
                --ty: 0;
                --tz: 1;
            }

            &:nth-of-type(19) {
                --tx: -1;
                --ty: 1;
                --tz: -1;
            }

            &:nth-of-type(20) {
                --tx: -1;
                --ty: 1;
                --tz: 0;
            }

            &:nth-of-type(21) {
                --tx: -1;
                --ty: 1;
                --tz: 1;
            }

            &:nth-of-type(22) {
                --tx: 0;
                --ty: 1;
                --tz: -1;
            }

            &:nth-of-type(23) {
                --tx: 0;
                --ty: 1;
                --tz: 0;
            }

            &:nth-of-type(24) {
                --tx: 0;
                --ty: 1;
                --tz: 1;
            }

            &:nth-of-type(25) {
                --tx: 1;
                --ty: 1;
                --tz: -1;
            }

            &:nth-of-type(26) {
                --tx: 1;
                --ty: 1;
                --tz: 0;
            }

            &:nth-of-type(27) {
                --tx: 1;
                --ty: 1;
                --tz: 1;
            }
        }
    }
}

[data-side="front-side"],
[data-side="back-side"],
[data-side="left-side"],
[data-side="right-side"],
[data-side="top-side"],
[data-side="bottom-side"] {
    width: 100%;
    height: 100%;
    position: absolute;
    border: 1px solid black;
    opacity: 1;
}

[data-side="front-side"] {
    background-color: red;
    transform: rotateY(0deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="back-side"] {
    background-color: orange;
    transform: rotateY(180deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="left-side"] {
    background-color: green;
    transform: rotateY(-90deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="right-side"] {
    background-color: blue;
    transform: rotateY(90deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="top-side"] {
    background-color: white;
    transform: rotateX(90deg) translateZ(calc(var(--size-cube) * .5));
}

[data-side="bottom-side"] {
    background-color: yellow;
    transform: rotateX(-90deg) translateZ(calc(var(--size-cube) * .5));
}